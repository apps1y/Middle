openapi: 3.0.1
info:
  contact: {}
  description: This is a backend for defer application.
  title: defer backend
  version: "1.0"
servers:
- url: https://defer-api.linuxfight.me
paths:
  /api/auth/login:
    post:
      description: Login to application to get a token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests.LoginRequest'
        description: User data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.TokenResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Internal Server Error
      summary: Login to application
      tags:
      - auth
      x-codegen-request-body-name: data
  /api/auth/register:
    post:
      description: Register a user in application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests.RegisterRequest'
        description: User data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Bad Request
      summary: Register a user
      tags:
      - auth
      x-codegen-request-body-name: data
  /api/ping:
    get:
      description: Send a ping request and get status
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: OK
      summary: Just a ping request
      tags:
      - ping
  /api/profile/me:
    get:
      description: Get user profile data
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.ProfileResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.StatusResponse'
          description: Not Found
      security:
      - JWT: []
      summary: Get user profile
      tags:
      - profile
components:
  schemas:
    requests.LoginRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    requests.RegisterRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    responses.ProfileResponse:
      example:
        data:
          created_at: created_at
          login: login
        status: status
      properties:
        data:
          $ref: '#/components/schemas/responses.UserProfile'
        status:
          type: string
      type: object
    responses.StatusResponse:
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    responses.TokenResponse:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    responses.UserProfile:
      example:
        created_at: created_at
        login: login
      properties:
        created_at:
          type: string
        login:
          type: string
      type: object
  securitySchemes:
    JWT:
      in: header
      name: Authorization
      type: apiKey
x-original-swagger-version: "2.0"
